{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\PROJETOS\\\\PrototypeSystemFrontend\\\\components\\\\withAuth.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// HOC/withAuth.jsx\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport verifyToken from \"services/verifyToken\";\n\nconst withAuth = WrappedComponent => {\n  return props => {\n    const Router = useRouter();\n    const {\n      0: verified,\n      1: setVerified\n    } = useState(false);\n    useEffect(async () => {\n      const accessToken = localStorage.getItem(\"accessToken\"); // if no accessToken was found,then we redirect to \"/\" page.\n\n      if (!accessToken) {\n        Router.replace(\"/\");\n      } else {\n        // we call the api that verifies the token.\n        const data = {\n          verified: true\n        };\n        /*await verifyToken(accessToken);*/\n        // if token was verified we set the state.\n\n        if (data.verified) {\n          setVerified(data.verified);\n        } else {\n          // If the token was fraud we first remove it from localStorage and then redirect to \"/\"\n          localStorage.removeItem(\"accessToken\");\n          Router.replace(\"/\");\n        }\n      }\n    }, []);\n\n    if (verified) {\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, _objectSpread({}, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }, this);\n    } else {\n      return null;\n    }\n  };\n};\n\nexport default withAuth;","map":{"version":3,"sources":["D:/PROJETOS/PrototypeSystemFrontend/components/withAuth.jsx"],"names":["useRouter","useEffect","useState","verifyToken","withAuth","WrappedComponent","props","Router","verified","setVerified","accessToken","localStorage","getItem","replace","data","removeItem"],"mappings":";;;;;;;;;AAAA;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;AAEA,MAAMC,QAAQ,GAAIC,gBAAD,IAAsB;AACrC,SAAQC,KAAD,IAAW;AAChB,UAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,UAAM;AAAA,SAACQ,QAAD;AAAA,SAAWC;AAAX,QAA0BP,QAAQ,CAAC,KAAD,CAAxC;AAEAD,IAAAA,SAAS,CAAC,YAAY;AACpB,YAAMS,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAApB,CADoB,CAEpB;;AACA,UAAI,CAACF,WAAL,EAAkB;AAChBH,QAAAA,MAAM,CAACM,OAAP,CAAe,GAAf;AACD,OAFD,MAEO;AACL;AACA,cAAMC,IAAI,GAAG;AAACN,UAAAA,QAAQ,EAAE;AAAX,SAAb;AAA+B;AAC/B;;AACA,YAAIM,IAAI,CAACN,QAAT,EAAmB;AACjBC,UAAAA,WAAW,CAACK,IAAI,CAACN,QAAN,CAAX;AACD,SAFD,MAEO;AACL;AACAG,UAAAA,YAAY,CAACI,UAAb,CAAwB,aAAxB;AACAR,UAAAA,MAAM,CAACM,OAAP,CAAe,GAAf;AACD;AACF;AACF,KAjBQ,EAiBN,EAjBM,CAAT;;AAmBA,QAAIL,QAAJ,EAAc;AACZ,0BAAO,QAAC,gBAAD,oBAAsBF,KAAtB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GA5BD;AA6BD,CA9BD;;AAgCA,eAAeF,QAAf","sourcesContent":["// HOC/withAuth.jsx\r\nimport { useRouter } from \"next/router\";\r\nimport { useEffect, useState } from \"react\";\r\nimport verifyToken from \"services/verifyToken\";\r\n\r\nconst withAuth = (WrappedComponent) => {\r\n  return (props) => {\r\n    const Router = useRouter();\r\n    const [verified, setVerified] = useState(false);\r\n\r\n    useEffect(async () => {\r\n      const accessToken = localStorage.getItem(\"accessToken\");\r\n      // if no accessToken was found,then we redirect to \"/\" page.\r\n      if (!accessToken) {\r\n        Router.replace(\"/\");\r\n      } else {\r\n        // we call the api that verifies the token.\r\n        const data = {verified: true}; /*await verifyToken(accessToken);*/\r\n        // if token was verified we set the state.\r\n        if (data.verified) {\r\n          setVerified(data.verified);\r\n        } else {\r\n          // If the token was fraud we first remove it from localStorage and then redirect to \"/\"\r\n          localStorage.removeItem(\"accessToken\");\r\n          Router.replace(\"/\");\r\n        }\r\n      }\r\n    }, []);\r\n\r\n    if (verified) {\r\n      return <WrappedComponent {...props} />;\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n};\r\n\r\nexport default withAuth;"]},"metadata":{},"sourceType":"module"}