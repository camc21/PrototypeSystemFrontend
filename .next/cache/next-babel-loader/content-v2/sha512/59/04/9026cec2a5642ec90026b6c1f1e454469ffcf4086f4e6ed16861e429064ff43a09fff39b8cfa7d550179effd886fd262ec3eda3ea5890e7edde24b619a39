{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\PROJETOS\\\\PrototypeSystemFrontend\\\\pages\\\\login\\\\index.jsx\";\n//imports api\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport { useSelector, useDispatch } from \"react-redux\"; //imports styles\n\nimport styles from '../../styles/login.module.css'; //imports bibliotecas\n\nimport { InputText } from 'primereact/inputtext';\nimport { Password } from 'primereact/password';\nimport { Button } from 'primereact/button';\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { Toast } from 'primereact/toast'; //imports services\n\nimport { LoginDataService } from '../../services/LoginDataService'; //actions\n\nimport { showButtonLoginLogoutAction } from '../../store/actions/login_logout';\nimport { toast } from '@chakra-ui/toast';\n\nfunction Login(props) {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    0: login,\n    1: setLogin\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: loadingCredentials,\n    1: setLoadingCredentials\n  } = useState(false);\n  const {\n    0: showValidationUserMessage,\n    1: setShowValidationUserMessage\n  } = useState(false);\n\n  function logIn() {\n    LoginDataService.logIn().then(response => {\n      if (response.data.code) {\n        () => showSuccess();\n      }\n    }).catch(error => {\n      console.log('baixo');\n      console.error(error);\n    });\n  } // LoginDataService.logIn(login, password).then(response => {\n  //     console.log(response);\n  //     if(response.data.code >= 300){\n  //         console.log('if');\n  //         setShowValidationUserMessage(true);\n  //         () => showSuccess();\n  //     } else {\n  //         console.log('else');\n  //         localStorage.setItem('accessToken', 'Bearer ' + response.data.token);\n  //         setLoadingCredentials(false);\n  //         dispatch(showButtonLoginLogoutAction(false));\n  //     }\n  // }); \n  // router.push('/');  \n  //   }\n\n\n  const toast = useRef();\n\n  const clear = () => {\n    toast.current.clear();\n  };\n\n  function showSuccess() {\n    toast.current.show({\n      severity: 'success',\n      summary: 'Success Message',\n      detail: 'Message Content',\n      life: 3000\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.layout_login,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.box_login,\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Toast, {\n        ref: toast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputText, {\n        value: login,\n        onChange: e => setLogin(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Password, {\n        className: styles.password,\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        toggleMask: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"Login\",\n        onClick: logIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), loadingCredentials && /*#__PURE__*/_jsxDEV(ProgressSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\nexport default Login;","map":{"version":3,"sources":["D:/PROJETOS/PrototypeSystemFrontend/pages/login/index.jsx"],"names":["React","useState","useEffect","useRef","useRouter","useSelector","useDispatch","styles","InputText","Password","Button","ProgressSpinner","Toast","LoginDataService","showButtonLoginLogoutAction","toast","Login","props","dispatch","router","login","setLogin","password","setPassword","loadingCredentials","setLoadingCredentials","showValidationUserMessage","setShowValidationUserMessage","logIn","then","response","data","code","showSuccess","catch","error","console","log","clear","current","show","severity","summary","detail","life","layout_login","box_login","e","target","value"],"mappings":"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","sourcesContent":["//imports api\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useRouter } from 'next/router'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n//imports styles\r\nimport styles from '../../styles/login.module.css'\r\n\r\n//imports bibliotecas\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport { Button } from 'primereact/button';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { Toast } from 'primereact/toast';\r\n\r\n//imports services\r\nimport { LoginDataService } from '../../services/LoginDataService';\r\n\r\n//actions\r\nimport { showButtonLoginLogoutAction } from '../../store/actions/login_logout';\r\nimport { toast } from '@chakra-ui/toast';\r\n\r\n\r\nfunction Login(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const router = useRouter()\r\n\r\n    const [login, setLogin] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loadingCredentials, setLoadingCredentials] = useState(false);\r\n    const [showValidationUserMessage, setShowValidationUserMessage] = useState(false);\r\n\r\n    function logIn() {\r\n        LoginDataService.logIn().then(response => {\r\n            if(response.data.code){\r\n                () => showSuccess();\r\n            }\r\n        }).catch(error =>{\r\n        console.log('baixo')\r\n        console.error(error);\r\n        }); \r\n    } \r\n        \r\n        // LoginDataService.logIn(login, password).then(response => {\r\n        //     console.log(response);\r\n        //     if(response.data.code >= 300){\r\n        //         console.log('if');\r\n        //         setShowValidationUserMessage(true);\r\n        //         () => showSuccess();\r\n        //     } else {\r\n        //         console.log('else');\r\n        //         localStorage.setItem('accessToken', 'Bearer ' + response.data.token);\r\n        //         setLoadingCredentials(false);\r\n        //         dispatch(showButtonLoginLogoutAction(false));\r\n        //     }\r\n        // }); \r\n        // router.push('/');  \r\n    //   }\r\n\r\n    const toast = useRef();\r\n\r\n    const clear = () => {\r\n        toast.current.clear();\r\n    }\r\n\r\n    function showSuccess() {\r\n        toast.current.show({severity:'success', summary: 'Success Message', detail:'Message Content', life: 3000});\r\n    }\r\n\r\n    return(\r\n        <div className={styles.layout_login}>\r\n            <div className={styles.box_login}>\r\n                <h5>Login</h5>\r\n                <Toast ref={toast} />\r\n                <InputText value={login} onChange={(e) => setLogin(e.target.value)} />\r\n\r\n                <h5>Senha</h5>\r\n                <Password className={styles.password} value={password} onChange={(e) => setPassword(e.target.value)} toggleMask />\r\n\r\n                <Button label=\"Login\" onClick={logIn} />\r\n                {loadingCredentials &&\r\n                    <ProgressSpinner />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default(Login)"]},"metadata":{},"sourceType":"module"}