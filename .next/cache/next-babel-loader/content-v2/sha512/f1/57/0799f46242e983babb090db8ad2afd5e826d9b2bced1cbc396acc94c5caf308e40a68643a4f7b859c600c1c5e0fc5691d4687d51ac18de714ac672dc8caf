{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { LOAD_SELECTED_DATA } from \"../../actions\";\nconst initialState = {\n  animeSelected: {\n    id: null,\n    nome: null,\n    temporada: null,\n    possuiManga: null\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case LOAD_SELECTED_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        animeSelected: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/PROJETOS/PrototypeSystemFrontend/store/reducers/anime/index.jsx"],"names":["HYDRATE","LOAD_SELECTED_DATA","initialState","animeSelected","id","nome","temporada","possuiManga","reducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,kBAAT,QAAmC,eAAnC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE;AAACC,IAAAA,EAAE,EAAE,IAAL;AAAWC,IAAAA,IAAI,EAAE,IAAjB;AAAuBC,IAAAA,SAAS,EAAE,IAAlC;AAAwCC,IAAAA,WAAW,EAAE;AAArD;AADI,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAEhD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,OAAL;AACE,6CAAYS,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;;AACF,SAAKX,kBAAL;AACI,6CACKQ,KADL;AAEEN,QAAAA,aAAa,EAAEO,MAAM,CAACE;AAFxB;;AAIJ;AACE,aAAOH,KAAP;AATJ;AAWD,CAbD;;AAeA,eAAeD,OAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport { LOAD_SELECTED_DATA } from \"../../actions\";\r\n\r\nconst initialState = {\r\n  animeSelected: {id: null, nome: null, temporada: null, possuiManga: null},\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      return { ...state, ...action.payload };\r\n    case LOAD_SELECTED_DATA:\r\n        return {\r\n          ...state,\r\n          animeSelected: action.payload\r\n        }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}